{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","markdown","setMarkdown","closeChars","Map","isReturn","className","value","onChange","e","target","pos","selectionStart","val","char","slice","closeChar","get","splice","join","selectionEnd","onKeyPress","element","keyCode","children","components","code","node","inline","props","match","exec","String","replace","style","atomDark","language","PreTag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAOe,SAASA,IAAO,IAAD,EACIC,mBAAS,2BADb,mBACrBC,EADqB,KACXC,EADW,KAGtBC,EAAa,IAAIC,IAAI,CACzB,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,OAGJC,GAAW,EAOf,OACE,sBAAKC,UAAU,YAAf,UACE,0BACEC,MAAON,EACPO,SAAU,SAACC,GAAO,IAAD,EACoBA,EAA3BC,OAAUH,GADH,aACa,GADb,GACGA,MAEZI,EAAMF,EAAEC,OAAOE,eACfC,EAAG,YAAOJ,EAAEC,OAAOH,OAEnBO,EAAOD,EAAIE,MAAMJ,EAAM,EAAGA,GAAK,GAC/BK,EAAYb,EAAWc,IAAIH,GAE7BT,EACFH,EAAYD,EAASc,MAAM,GAAI,KAE/Bb,EAAYK,GAERS,IACFH,EAAIK,OAAOP,EAAK,EAAGK,GACnBP,EAAEC,OAAOH,MAAQM,EAAIM,KAAK,IAC1BV,EAAEC,OAAOU,aAAeT,EAExBT,EAAYO,EAAEC,OAAOH,UAI3Bc,WAhCc,SAACC,GACQjB,EAAH,IAApBiB,EAAQC,WAkCV,cAAC,IAAD,CAAejB,UAAU,UACvBkB,SAAUvB,EACVwB,WAAY,CACVC,KADU,YAC4C,EAA/CC,KAAgD,IAA1CC,EAAyC,EAAzCA,OAAQtB,EAAiC,EAAjCA,UAAWkB,EAAsB,EAAtBA,SAAaK,EAAS,wDAC9CC,EAAQ,iBAAiBC,KAAKzB,GAAa,IACjD,OAAQsB,GAAUE,EAChB,cAAC,IAAD,aACEN,SAAUQ,OAAOR,GAAUS,QAAQ,MAAO,IAC1CC,MAAOC,IACPC,SAAUN,EAAM,GAChBO,OAAO,OACHR,IAGN,8CAAMvB,UAAWA,GAAeuB,GAAhC,aACGL,YCtEjB,IAYec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d0eecd65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nimport \"./App.scss\";\n\nexport default function App() {\n  const [markdown, setMarkdown] = useState(\"# Fancy markdown editor\");\n\n  const closeChars = new Map([\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n    ['\"', '\"'],\n    [\"<\", \">\"],\n  ]);\n\n  let isReturn = false\n\n  const isBackSpace = (element) => {\n    if (element.keyCode === 8) isReturn = true\n    else isReturn = false\n  }\n\n  return (\n    <div className=\"container\">\n      <textarea\n        value={markdown}\n        onChange={(e) => {\n          const { target: { value } = {} } = e;\n\n          const pos = e.target.selectionStart;\n          const val = [...e.target.value];\n\n          const char = val.slice(pos - 1, pos)[0];\n          const closeChar = closeChars.get(char);\n\n          if (isReturn) {\n            setMarkdown(markdown.slice(0, -1))\n          } else {\n            setMarkdown(value)\n\n            if (closeChar) {\n              val.splice(pos, 0, closeChar);\n              e.target.value = val.join('');\n              e.target.selectionEnd = pos;\n\n              setMarkdown(e.target.value)\n            }\n          }\n        }}\n        onKeyPress={isBackSpace}\n      />\n\n      <ReactMarkdown className=\"preview\"\n        children={markdown}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '')\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, '')}\n                style={atomDark}\n                language={match[1]}\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            )\n          }\n        }}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}